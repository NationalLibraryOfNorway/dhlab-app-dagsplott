import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\nconst colorPalette = [\n 'rgb(255, 99, 132)',\n 'rgb(54, 162, 235)',\n 'rgb(255, 206, 86)',\n 'rgb(75, 192, 192)',\n 'rgb(153, 102, 255)',\n 'rgb(255, 159, 64)',\n];\n\nexport default function App() {\n const [word, setWord] = useState('sushi, pizza');\n const [startDate, setStartDate] = useState('2020-01-01');\n const [endDate, setEndDate] = useState('2020-12-31');\n const [data, setData] = useState(null);\n const [rawGrouped, setRawGrouped] = useState(null);\n const [allDates, setAllDates] = useState([]);\n const [loading, setLoading] = useState(false);\n const [smooth, setSmooth] = useState(1);\n const [cumulative, setCumulative] = useState(false);\n const [cohort, setCohort] = useState(false);\n\n const format = date => date.replace(/-/g, '');\n\n const smoothArray = (arr, k) => {\n if (k <= 1) return arr;\n return arr.map((, i, a) => {\n const start = Math.max(0, i - Math.floor(k / 2));\n const end = Math.min(a.length, i + Math.ceil(k / 2));\n const slice = a.slice(start, end);\n const valid = slice.filter(v => typeof v === 'number');\n return valid.reduce((sum, val) => sum + val, 0) / valid.length;\n });\n };\n\n const buildDatasets = (orderedWords, grouped, dates, cum, smoothing, cohortMode) => {\n let allY = orderedWords.map(w => dates.map(date => grouped[w]?.[date] || 0));\n\n if (cohortMode) {\n const totals = dates.map((, i) =>\n allY.reduce((sum, series) => sum + series[i], 0)\n );\n allY = allY.map(series =>\n series.map((val, i) => totals[i] ? val / totals[i] : 0)\n );\n } else if (cum) {\n allY = allY.map(series =>\n series.reduce((acc, val, i) => [...acc, val + (acc[i - 1] || 0)], [])\n );\n }\n\n allY = allY.map(series => smoothArray(series, smoothing));\n\n return orderedWords.map((w, idx) => ({\n label: w,\n data: allY[idx],\n fill: false,\n borderColor: colorPalette[idx % colorPalette.length],\n tension: 0.1,\n pointRadius: 0\n }));\n };\n\n const fetchData = async () => {\n setLoading(true);\n try {\n const orderedWords = word.split(',').map(w => w.trim()).filter(w => w);\n\n const response = await fetch('https://api.nb.no/dhlab/ngram_newspapers', {\n method: 'POST',\n headers: {\n 'Content-Type': 'application/json',\n 'Accept': 'application/json'\n },\n body: JSON.stringify({\n period: [parseInt(format(startDate)), parseInt(format(endDate))],\n word: orderedWords\n })\n });\n\n const json = await response.json();\n\n const grouped = {};\n Object.entries(json).forEach(([key, count]) => {\n const [w, date] = key.split(' ');\n if (!grouped[w]) grouped[w] = {};\n grouped[w][date] = count;\n });\n\n const dates = Object.values(grouped)[0] ? Object.keys(Object.values(grouped)[0]).sort() : [];\n setRawGrouped(grouped);\n setAllDates(dates);\n\n const datasets = buildDatasets(orderedWords, grouped, dates, cumulative, smooth, cohort);\n setData({ labels: dates, datasets });\n } catch (e) {\n console.error('Error fetching data:', e);\n } finally {\n setLoading(false);\n }\n };\n\n useEffect(() => {\n if (rawGrouped && allDates.length) {\n const orderedWords = word.split(',').map(w => w.trim()).filter(w => w);\n const datasets = buildDatasets(orderedWords, rawGrouped, allDates, cumulative, smooth, cohort);\n setData({ labels: allDates, datasets });\n }\n }, [cumulative, smooth, cohort]);\n\n const handleKeyDown = (e) => {\n if (e.key === 'Enter') fetchData();\n };\n\n return (\n <div className="min-h-screen bg-gradient-to-br from-slate-100 via-white to-slate-200 p-6 font-sans">\n <div className="max-w-4xl mx-auto bg-white shadow-xl rounded-3xl px-4 sm:px-8 py-10 space-y-8">\n <h1 className="text-4xl font-bold text-center text-slate-800 tracking-tight">📰 Daily Ngram Visualizer</h1>\n\n <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-6">\n <div>\n <label className="block text-sm font-medium text-slate-700 mb-1">Words</label>\n <input\n className="w-full border border-slate-300 p-3 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white"\n value={word}\n onChange={e => setWord(e.target.value)}\n onKeyDown={handleKeyDown}\n placeholder="pizza, sushi"\n />\n </div>\n <div>\n <label className="block text-sm font-medium text-slate-700 mb-1">Start Date</label>\n <input\n className="w-full border border-slate-300 p-3 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white"\n type="date"\n value={startDate}\n onChange={e => setStartDate(e.target.value)}\n />\n </div>\n <div>\n <label className="block text-sm font-medium text-slate-700 mb-1">End Date</label>\n <input\n className="w-full border border-slate-300 p-3 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white"\n type="date"\n value={endDate}\n onChange={e => setEndDate(e.target.value)}\n />\n </div>\n </div>\n\n <div className="flex flex-col sm:flex-row sm:items-end gap-4 sm:gap-6">\n <div className="sm:w-1/3">\n <label className="block text-sm font-medium text-slate-700 mb-1">Smoothing (days)</label>\n <input\n className="w-full border border-slate-300 p-2 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white"\n type="number"\n min="1"\n max="31"\n value={smooth}\n onChange={e => setSmooth(Number(e.target.value))}\n />\n </div>\n <div className="flex gap-4 items-center">\n <label className="text-slate-700">\n <input type="checkbox" className="mr-2" checked={cumulative} onChange={e => setCumulative(e.target.checked)} />\n Cumulative\n </label>\n <label className="text-slate-700">\n <input type="checkbox" className="mr-2" checked={cohort} onChange={e => setCohort(e.target.checked)} />\n Cohort\n </label>\n </div>\n <div className="text-right sm:text-center sm:pt-8">\n <button\n className="bg-blue-600 hover:bg-blue-700 transition text-white font-semibold px-6 py-3 rounded-lg w-full sm:w-auto"\n onClick={fetchData}\n >\n 🔍 Fetch\n </button>\n </div>\n </div>\n\n {loading && <p className="text-center text-blue-600">Loading...</p>}\n {data && <div className="pt-4 max-h-[60vh] overflow-y-auto"><Line data={data} /></div>}\n </div>\n </div>
